name: Deploy to Prod

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Deploy to EC2',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.AWS_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo su - ec2-user -c \"cd /home/ec2-user/SteamPriceTracker && git pull origin master\"",
              "sudo su - ec2-user -c \"cd /home/ec2-user/SteamPriceTracker/frontend && npm run build\"",
              "sudo cp -r /home/ec2-user/SteamPriceTracker/frontend/dist/* /var/www/steampricetracker.com/",
              "sudo systemctl restart steampricetracker",
              "sudo systemctl restart nginx"
            ]'

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: status
            });
              
